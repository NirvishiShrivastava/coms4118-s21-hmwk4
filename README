TESTS:

1. Test to check if timeslices are allocated according to weight of the process

Test Program: test_runs/weighted_fork.c
Output Log: test_runs/weighted_fork.log
Creates 3 processes with weights 4, 20 & 100 assigned to them.
This program is run using taskset (cmd in output log file) so that all the 3 processes run the on the same CPU and none of them run in 
parallel on different cores.

Each process runs a while loop that runs 100 times while doing a CPU bound iteration from 0 to 50,000,000 and then prints out
the iteration number of the while loop at the end of each iteration.

The output log suggests that the process with maximum weight i.e. 100 (aka Grandchild in the logs) gets 
the maximum time and finishes its 100 iterations first. Meanwhile the process with weight as 20 (aka Child in the logs) reaches approx.
20 iterations and the least weighted process (called Parent in the logs) reaches 4 iterations.

2. Load Balancing with CPU bound processes.

Test Programs: get_wrr_info_test.c & test_runs/cpu_bound_forks.c

We run test_runs/cpu_bound_forks.c to create 8 processes that run an infinite while loop (we do not print inside the while loop so that 
the processes do not sleep and only preempt when their timeslice is over).

We run get_wrr_info_test.c repeatedly to see the load across all the CPUs. The output for these runs is saved in 
test_runs/cpu_bound_forks_load_balance.log which clearly indicates that the load is balanced across CPUs. The total number of processes
shown in the logs is more than 8 as there are other running processes such as kworker, rcu_sched, gnome-shell, gnome-terminal, etc.

